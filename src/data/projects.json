[
    {
        "id": "particle_simulator",
        "title": "Particle Simulator",
        "tagline": "Simulating particles in a 2D space with elastic collisions with distributed computing",
        "description": "The developer server must be able to add particles to the simulation. The simulation must be able to calculate the collisions between particles and screen edges. Clients connect and move around the simulation space in a zoomed up screen and can also see each other. They can also disconnect and connect again at any time, however, only up to three (3) existing clients as a limitation. \n The server acts as a state checker that all clients will follow. Essentially, the program runs and computes on both server and client, but the client tries to refresh based on the server's current state to stay synced up with other clients and the server itself. Made with nonblocking UDP sockets.",
        "image": "particle_sim.png",
        "link": "",
        "github": "https://github.com/erik-lance/Particle-Simulator-v3",
        "tech": ["C++", "vcpkg", "SDL2", "imgui", "LWJGL", "Java"]
    },
    {
        "id": "star_rail_assistant",
        "title": "Star Rail Assistant",
        "tagline": "A NextJS web app that helps track gacha data for Honkai Star Rail",
        "description": "This web app fetches from the undocumented API of Hoyoverse's Honkai Star Rail. It reads data from the API and displays it in a more readable format. It's a work in progress and I'm still adding more features to it. It helped me learn how to write a NextJS app and use Material UI for the interfaces.",
        "image": "star_rail_assistant.png",
        "link": "https://star-rail-assistant.vercel.app/",
        "github": "https://github.com/erik-lance/Star-Rail-Assistant",
        "tech": ["NextJS", "React", "TypeScript", "TailwindCSS", "Material UI"]
    },
    {
        "id": "house_prices_analysis",
        "title": "House Prices Analysis",
        "tagline": "King County house condition classification analysis",
        "description": "a project aimed at classifying houses based on their condition. The condition of a house, graded on a scale of 1 to 5, serves as our target variable. This classification task will empower us to predict and differentiate houses based on their state of repair and maintenance.",
        "image": "house_analysis.png",
        "link": "",
        "github": "https://github.com/erik-lance/House-Prices-Analysis",
        "tech": ["Python", "numPy", "Pandas", "Geopandas", "scikit-learn", "Seaborn"]
    },
    {
        "id": "transaction_management_system",
        "title": "Transaction Management System",
        "tagline": "Distributed database with 3 web app Azure servers with MySQL",
        "description": "Distributed database with 3 web app Azure servers with MySQL.",
        "image": "transaction_management.png",
        "link": "",
        "github": "https://github.com/erik-lance/Transaction-Management",
        "tech": ["Azure", "MySQL", "NodeJS", "Apache Web Server"]
    },
    {
        "id": "meister_eliphas",
        "title": "Meister Eliphas",
        "tagline": "Godot Strategy Portal Game for the 3rd UGJ Birthday Bash and GameDev.tv jam",
        "description": "Godot Strategy Portal Game for the 3rd UGJ Birthday Bash and GameDev.tv jam.",
        "image": "meister.jpg",
        "link": "https://maplepoki.itch.io/meister-eliphas",
        "github": "https://github.com/erik-lance/Meister-Eliphas",
        "tech": ["Godot", "GDScript"]
    },
    {
        "id": "message_board_system",
        "title": "Message Board System",
        "tagline": "UDP Client-server MBS made in Python. Made for Network class",
        "description": "UDP Client-server MBS made in Python. Made for Network class.",
        "image": "mbs.png",
        "link": "",
        "github": "https://github.com/erik-lance/CSNETWK-Message-Board-System",
        "tech": ["Python"]
    },
    {
        "id": "grocery_shopping_model",
        "title": "Grocery Shopping Model",
        "tagline": "A NetLogo simulation of a grocery store that shows traffic and sales in a grocery store.",
        "description": "A NetLogo Agent-Based Modeling simulation of a grocery store that shows traffic and sales in a grocery store.",
        "image": "grocery.png",
        "link": "",
        "github": "https://github.com/erik-lance/Grocery-Shopping-ABM-Model",
        "tech": ["NetLogo"]
    },
    {
        "id": "machine_equivalence_checker",
        "title": "Machine Equivalence Checker",
        "tagline": "Project in Finite State Automata that checks the equivalence of N machines.",
        "description": "The specs are as follows:\n <NFA Name>\n|Q|\n<|Q| lines follow, each with a state name>\n|S|\n<|S| lines follow, each with a stimulus symbol>\n|δ|\n<|δ|, each with a transition of the format <src> <stimulus> <dest>>\nq_I - initial state (guaranteed to only have one)\n|F|\n<|F| lines follow, each with a final state, which is a valid member of Q from above>",
        "image": "fsm.png",
        "link": "",
        "github": "https://github.com/erik-lance/STALGCM-MP",
        "tech": ["Prolog"]
    },
    {
        "id": "travel_advisor_agent",
        "title": "Travel Advisor Agent",
        "tagline": "A Prolog program with a knowledge base of travel advisories",
        "description": "This was to test our knowledge of Prolog and constructing our own knowledge base based on the requirements for travel during COVID-19.",
        "image": "travel.png",
        "link": "",
        "github": "https://github.com/erik-lance/travel-advisor",
        "tech": ["Prolog"]
    },
    {
        "id": "gold_miner_agent",
        "title": "Gold Miner Agent",
        "tagline": "A-Star algorithm pathfinding agent with self-calculated heuristics.",
        "description": "The gist is that there's a gold block the miner must reach. The agent does not know where it is and can scan ahead of it to detect if it finds something. When it scans, it returns what that object is (Pit/Beacon/Gold) but it doesn't know where in that line it is.\nThe agent can also ONLY turn right and move forward.\nThe beacon helps return a value of where the gold is from the beacon in terms of Manhattan Distance, which makes the agent calculate a grid of squares where the gold might be.\nPits are tiles that makes the game over. The agent must avoid these tiles in order to reach the goal state.",
        "image": "gold.png",
        "link": "",
        "github": "https://github.com/erik-lance/Gold-Miner-Heuristic-Agent",
        "tech": ["Java"]
    },
    {
        "id": "checkers_chess_ai",
        "title": "Checkers Chess AI",
        "tagline": "Play against an AI in Checkers/Chess. Uses Game Trees through Min/Max and Alpha-Beta Pruning.",
        "description": "When it comes to checkers, the utility function or heuristic calculation is actually simple. We use a static material evaluation to calculate the best play. It simply counts all available pieces, but kinged pieces are valued higher by 1 point. The agent's number of pieces are then subtracted to the human's number of pieces. It simply stays at zero until there's an uneven takeback of pieces.\nHowever, the chess heuristics is a different story. It is still quite similar in Checkers heuristics with material static evaluation, however, I took the liberty to look up the PeSTO evaluation which is used in RofChade. It's too complicated for me to explain, but I used their evaluation function for the sake of this project. It is not working as fully intended, but works pretty well for an AI nonetheless.",
        "image": "chess.png",
        "link": "",
        "github": "https://github.com/erik-lance/Gold-Miner-Heuristic-Agent",
        "tech": ["Java"]
    }
]